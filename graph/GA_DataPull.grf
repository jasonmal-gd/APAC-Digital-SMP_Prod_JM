<?xml version="1.0" encoding="UTF-8"?>
<Graph author="macmac" created="Tue Jul 15 09:44:22 EST 2014" guiVersion="3.4.4.P" id="1405400627656" licenseType="Commercial" modified="Tue Jul 22 15:19:36 EST 2014" modifiedBy="macmac" name="GA" revision="1.17" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/GA_API1.fmt" id="Metadata1"/>
<Metadata fileURL="${META_DIR}/GA_API2.fmt" id="Metadata3"/>
<Metadata fileURL="${META_DIR}/GA_API3.fmt" id="Metadata2"/>
<Metadata fileURL="${META_DIR}/GA_API4.fmt" id="Metadata5"/>
<Metadata fileURL="${META_DIR}/GAResponse.fmt" id="Metadata0"/>
<Metadata id="Metadata4">
<Record fieldDelimiter="|" name="recordName1" recordDelimiter="\n" type="delimited">
<Field format="yyyyMMdd" name="date" type="date"/>
<Field eofAsDelimiter="false" name="sourcemedium" nullable="true" shift="0" size="0" type="string"/>
<Field name="campaign" type="string"/>
<Field name="Users" type="number"/>
<Field name="Sessions" type="number"/>
<Field name="bounces" type="number"/>
<Field eofAsDelimiter="false" name="transactionId" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="ClientID" nullable="true" shift="0" size="0" type="string"/>
<Field name="productSku" type="string"/>
<Field name="goal1completions" type="number"/>
<Field name="goal2completions" type="number"/>
<Field name="goal3completions" type="number"/>
<Field name="goal4completions" type="number"/>
<Field name="goal5completions" type="number"/>
<Field name="goal6completions" type="number"/>
<Field name="goal7completions" type="number"/>
<Field name="goal8completions" type="number"/>
<Field name="goal9completions" type="number"/>
<Field name="goal10completions" type="number"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="false" folded="false" height="704" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="Pull GA Data" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="643" x="193" y="170"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="disabled" fileURL="${DATA_SOURCE_DIR}/API1.csv" guiName="CSV Writer" guiX="638" guiY="233" id="CSV_WRITER" quoteCharacter="&quot;" quotedStrings="true" type="DATA_WRITER"/>
<Node enabled="disabled" fileURL="${DATA_SOURCE_DIR}/API4.csv" guiName="CSV Writer" guiX="638" guiY="708" id="CSV_WRITER4" quoteCharacter="&quot;" quotedStrings="true" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${DATA_SOURCE_DIR}/API2.csv" guiName="CSV Writer" guiX="638" guiY="382" id="CSV_WRITER5" quoteCharacter="&quot;" quotedStrings="true" type="DATA_WRITER"/>
<Node enabled="disabled" fileURL="${DATA_SOURCE_DIR}/API3.csv" guiName="CSV Writer" guiX="632" guiY="516" id="CSV_WRITER6" quoteCharacter="&quot;" quotedStrings="true" type="DATA_WRITER"/>
<Node charset="UTF-8" enabled="disabled" fileURL="port:$0.response:discrete" guiName="JSonReaderAPI1" guiX="417" guiY="199" id="JSON_READER_API1" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	<Context xpath="root/object">
	   <Context xpath="rows" outPort="0">
	    <Mapping xpath="rows[1]" cloverField="date"/>
		<Mapping xpath="rows[2]" cloverField="sourcemedium"/>
		<Mapping xpath="rows[3]" cloverField="campaign"/>
		<Mapping xpath="rows[4]" cloverField="deviceCategory"/>
		<Mapping xpath="rows[5]" cloverField="pagetitle"/>
		<Mapping xpath="rows[6]" cloverField="pagepath"/>
		<Mapping xpath="rows[7]" cloverField="hostname"/>
		<Mapping xpath="rows[8]" cloverField="Users"/>
		<Mapping xpath="rows[9]" cloverField="Sessions"/>
		<Mapping xpath="rows[10]" cloverField="bounces"/>
		
	   </Context>
	</Context>]]></attr>
</Node>
<Node charset="UTF-8" enabled="enabled" fileURL="port:$0.response:discrete" guiName="JSonReaderAPI2" guiX="409" guiY="400" id="JSON_READER_API2" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	<Context xpath="root/object">
	   <Context xpath="rows" outPort="0">
	    <Mapping xpath="rows[1]" cloverField="date"/>
		<Mapping xpath="rows[2]" cloverField="sourcemedium"/>
		<Mapping xpath="rows[3]" cloverField="campaign"/>
		<Mapping xpath="rows[4]" cloverField="Productname"/>
		<Mapping xpath="rows[5]" cloverField="ProductCategory"/>
		<Mapping xpath="rows[6]" cloverField="transactionId"/>
		<Mapping xpath="rows[7]" cloverField="productSku"/>
		<Mapping xpath="rows[8]" cloverField="itemQuantity"/>
		<Mapping xpath="rows[9]" cloverField="itemRevenue"/>
	   </Context>
	</Context>]]></attr>
</Node>
<Node charset="UTF-8" enabled="disabled" fileURL="port:$0.response:discrete" guiName="JSonReaderAPI3" guiX="430" guiY="587" id="JSON_READER_API3" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	<Context xpath="root/object">
	   <Context xpath="rows" outPort="0">
	    <Mapping xpath="rows[1]" cloverField="date"/>
		<Mapping xpath="rows[2]" cloverField="sourcemedium"/>
		<Mapping xpath="rows[3]" cloverField="campaign"/>
		<Mapping xpath="rows[4]" cloverField="goal1completions"/>
		<Mapping xpath="rows[5]" cloverField="goal2completions"/>
		<Mapping xpath="rows[6]" cloverField="goal3completions"/>
		<Mapping xpath="rows[7]" cloverField="goal4completions"/>
		<Mapping xpath="rows[8]" cloverField="goal5completions"/>
		<Mapping xpath="rows[9]" cloverField="goal6completions"/>
		<Mapping xpath="rows[10]" cloverField="goal7completions"/>
		<Mapping xpath="rows[11]" cloverField="goal8completions"/>
		<Mapping xpath="rows[12]" cloverField="goal9completions"/>
		<Mapping xpath="rows[13]" cloverField="goal10completions"/>
	   </Context>
	</Context>]]></attr>
</Node>
<Node charset="UTF-8" enabled="disabled" fileURL="port:$0.response:discrete" guiName="JsonReaderAPI4" guiX="430" guiY="720" id="JSON_READER_API4" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	<Context xpath="root/object">
	   <Context xpath="rows" outPort="0">
	    <Mapping xpath="rows[1]" cloverField="date"/>
		<Mapping xpath="rows[2]" cloverField="sourcemedium"/>
		<Mapping xpath="rows[3]" cloverField="campaign"/>
		<Mapping xpath="rows[4]" cloverField="goal11completions"/>
		<Mapping xpath="rows[5]" cloverField="goal12completions"/>
		<Mapping xpath="rows[6]" cloverField="goal13completions"/>
		<Mapping xpath="rows[7]" cloverField="goal14completions"/>
		<Mapping xpath="rows[8]" cloverField="goal15completions"/>
		<Mapping xpath="rows[9]" cloverField="goal16completions"/>
		<Mapping xpath="rows[10]" cloverField="goal17completions"/>
		<Mapping xpath="rows[11]" cloverField="goal18completions"/>
		<Mapping xpath="rows[12]" cloverField="goal19completions"/>
		<Mapping xpath="rows[13]" cloverField="goal20completions"/>
	   </Context>
	</Context>]]></attr>
</Node>
<Node authConfiguration="{&quot;authMethod&quot;:&quot;OAUTH_2&quot;,&quot;authCredentials&quot;:{&quot;REFRESH_TOKEN&quot;:&quot;${GA_REF_TOKEN}&quot;,&quot;CLIENT_ID&quot;:&quot;${GA_CLIENT_ID}&quot;,&quot;REFRESH_TOKEN_URL&quot;:&quot;${GOOGLE_TOKEN_URL}&quot;,&quot;CLIENT_SECRET&quot;:&quot;${GA_CLIENT_SECRET}&quot;}}" charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;number index;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    integer RECORDS_PER_PAGE = 10000;&#10;    &#10;&#9;if (iterationNumber == 0 OR iterationNumber ==1)&#10;&#9;requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=1&quot;;&#10;&#9;else requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=&quot;+toString(((iterationNumber-1) * RECORDS_PER_PAGE)+1);&#10;&#9;index=((iterationNumber-1) * RECORDS_PER_PAGE)+1;&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;  // return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#10;    // Example response handling&#10;     if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;         return &quot;CONTINUE&quot;;&#10;     }&#10;     else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;         return &quot;DONE_NO_OUTPUT&quot;;&#10;     }&#10;     else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;         return &quot;RETRY&quot;;&#10;     }&#10;     else {&#10;    //     // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;         return &quot;FATAL_ERROR&quot;;&#10;     }&#10;&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="disabled" guiName="REST API1 GD" guiX="208" guiY="211" id="REST_API1_GD" maxPageNumber="20" requestDelayInSeconds="2" requestMethod="GET" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://www.googleapis.com/analytics/v3/data/ga?ids=ga%3A${GA_PROFILE_ID}&start-date=${GA_START}&end-date=${GA_END}&metrics=ga%3AUsers%2Cga%3ASessions%2Cga%3Abounces&dimensions=ga%3Adate%2Cga%3AsourceMedium%2Cga%3Acampaign%2Cga%3AdeviceCategory%2Cga%3Apagetitle%2Cga%3Apagepath%2Cga%3Ahostname&max-results=${GA_ROWS}&samplingLevel=HIGHER_PRECISION&${START_INDEX}]]></attr>
</Node>
<Node authConfiguration="{&quot;authMethod&quot;:&quot;OAUTH_2&quot;,&quot;authCredentials&quot;:{&quot;REFRESH_TOKEN&quot;:&quot;${GA_REF_TOKEN}&quot;,&quot;CLIENT_ID&quot;:&quot;${GA_CLIENT_ID}&quot;,&quot;REFRESH_TOKEN_URL&quot;:&quot;${GOOGLE_TOKEN_URL}&quot;,&quot;CLIENT_SECRET&quot;:&quot;${GA_CLIENT_SECRET}&quot;}}" charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;number index;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    integer RECORDS_PER_PAGE = 10000;&#10;    &#10;&#9;if (iterationNumber == 0 OR iterationNumber ==1)&#10;&#9;requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=1&quot;;&#10;&#9;else requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=&quot;+toString(((iterationNumber-1) * RECORDS_PER_PAGE)+1);&#10;&#9;index=((iterationNumber-1) * RECORDS_PER_PAGE)+1;&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;  // return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#10;    // Example response handling&#10;     if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;         return &quot;CONTINUE&quot;;&#10;     }&#10;     else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;         return &quot;DONE_NO_OUTPUT&quot;;&#10;     }&#10;     else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;         return &quot;RETRY&quot;;&#10;     }&#10;     else {&#10;    //     // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;         return &quot;FATAL_ERROR&quot;;&#10;     }&#10;&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="enabled" guiName="REST API2 GD" guiX="208" guiY="400" id="REST_API2_GD" maxPageNumber="20" requestDelayInSeconds="3" requestMethod="GET" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://www.googleapis.com/analytics/v3/data/ga?ids=ga%3A${GA_PROFILE_ID}&start-date=${GA_START}&end-date=${GA_END}&metrics=ga%3AitemQuantity%2Cga%3AitemRevenue&dimensions=ga%3Adate%2Cga%3AsourceMedium%2Cga%3Acampaign%2Cga%3AProductname%2Cga%3AProductCategory%2Cga%3AtransactionId%2Cga%3AproductSku&max-results=${GA_ROWS}&samplingLevel=HIGHER_PRECISION${START_INDEX}]]></attr>
</Node>
<Node authConfiguration="{&quot;authMethod&quot;:&quot;OAUTH_2&quot;,&quot;authCredentials&quot;:{&quot;REFRESH_TOKEN&quot;:&quot;${GA_REF_TOKEN}&quot;,&quot;CLIENT_ID&quot;:&quot;${GA_CLIENT_ID}&quot;,&quot;REFRESH_TOKEN_URL&quot;:&quot;${GOOGLE_TOKEN_URL}&quot;,&quot;CLIENT_SECRET&quot;:&quot;${GA_CLIENT_SECRET}&quot;}}" charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;number index;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    integer RECORDS_PER_PAGE = 10000;&#10;    &#10;&#9;if (iterationNumber == 0 OR iterationNumber ==1)&#10;&#9;requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=1&quot;;&#10;&#9;else requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=&quot;+toString(((iterationNumber-1) * RECORDS_PER_PAGE)+1);&#10;&#9;index=((iterationNumber-1) * RECORDS_PER_PAGE)+1;&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;  // return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#10;    // Example response handling&#10;     if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;         return &quot;CONTINUE&quot;;&#10;     }&#10;     else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;         return &quot;DONE_NO_OUTPUT&quot;;&#10;     }&#10;     else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;         return &quot;RETRY&quot;;&#10;     }&#10;     else {&#10;    //     // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;         return &quot;FATAL_ERROR&quot;;&#10;     }&#10;&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="disabled" guiName="REST API3 GD" guiX="193" guiY="579" id="REST_API3_GD" maxPageNumber="20" requestDelayInSeconds="4" requestMethod="GET" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://www.googleapis.com/analytics/v3/data/ga?ids=ga%3A${GA_PROFILE_ID}&start-date=${GA_START}&end-date=${GA_END}&metrics=ga%3Agoal1completions%2Cga%3Agoal2completions%2Cga%3Agoal3completions%2Cga%3Agoal4completions%2Cga%3Agoal5completions%2Cga%3Agoal6completions%2Cga%3Agoal7completions%2Cga%3Agoal8completions%2Cga%3Agoal9completions%2Cga%3Agoal10completions&dimensions=ga%3Adate%2Cga%3AsourceMedium%2Cga%3Acampaign&max-results=${GA_ROWS}&samplingLevel=HIGHER_PRECISION&start-index=1]]></attr>
</Node>
<Node authConfiguration="{&quot;authMethod&quot;:&quot;OAUTH_2&quot;,&quot;authCredentials&quot;:{&quot;REFRESH_TOKEN&quot;:&quot;${GA_REF_TOKEN}&quot;,&quot;CLIENT_ID&quot;:&quot;${GA_CLIENT_ID}&quot;,&quot;REFRESH_TOKEN_URL&quot;:&quot;${GOOGLE_TOKEN_URL}&quot;,&quot;CLIENT_SECRET&quot;:&quot;${GA_CLIENT_SECRET}&quot;}}" charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;number index;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    integer RECORDS_PER_PAGE = 10000;&#10;    &#10;&#9;if (iterationNumber == 0 OR iterationNumber ==1)&#10;&#9;requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=1&quot;;&#10;&#9;else requestParams[&quot;START_INDEX&quot;] =&quot;&amp;start-index=&quot;+toString(((iterationNumber-1) * RECORDS_PER_PAGE)+1);&#10;&#9;index=((iterationNumber-1) * RECORDS_PER_PAGE)+1;&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;  // return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#10;    // Example response handling&#10;     if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;         return &quot;CONTINUE&quot;;&#10;     }&#10;     else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;         return &quot;DONE_NO_OUTPUT&quot;;&#10;     }&#10;     else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;         return &quot;RETRY&quot;;&#10;     }&#10;     else {&#10;    //     // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;         return &quot;FATAL_ERROR&quot;;&#10;     }&#10;&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="disabled" guiName="REST API4 GD" guiX="193" guiY="720" id="REST_API4_GD" maxPageNumber="20" requestDelayInSeconds="5" requestMethod="GET" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://www.googleapis.com/analytics/v3/data/ga?ids=ga%3A${GA_PROFILE_ID}&start-date=${GA_START}&end-date=${GA_END}&metrics=ga%3Agoal11completions%2Cga%3Agoal12completions%2Cga%3Agoal13completions%2Cga%3Agoal14completions%2Cga%3Agoal15completions%2Cga%3Agoal16completions%2Cga%3Agoal17completions%2Cga%3Agoal18completions%2Cga%3Agoal19completions%2Cga%3Agoal20completions&dimensions=ga%3Adate%2Cga%3AsourceMedium%2Cga%3Acampaign&max-results=${GA_ROWS}&samplingLevel=HIGHER_PRECISION&start-index=1]]></attr>
</Node>
<Edge debugMode="true" fromNode="JSON_READER_API1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="CSV_WRITER:0"/>
<Edge debugMode="true" fromNode="JSON_READER_API2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="CSV_WRITER5:0"/>
<Edge debugMode="true" fromNode="JSON_READER_API3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="CSV_WRITER6:0"/>
<Edge debugMode="true" fromNode="JSON_READER_API4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="CSV_WRITER4:0"/>
<Edge debugMode="true" fromNode="REST_API1_GD:0" guiBendpoints="" guiRouter="Manhattan" id="Edge27" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="JSON_READER_API1:0"/>
<Edge debugMode="true" fromNode="REST_API2_GD:0" guiBendpoints="" guiRouter="Manhattan" id="Edge31" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="JSON_READER_API2:0"/>
<Edge fromNode="REST_API3_GD:0" guiBendpoints="" guiRouter="Manhattan" id="Edge32" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="JSON_READER_API3:0"/>
<Edge debugMode="true" fromNode="REST_API4_GD:0" guiBendpoints="" guiRouter="Manhattan" id="Edge33" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="JSON_READER_API4:0"/>
</Phase>
</Graph>
