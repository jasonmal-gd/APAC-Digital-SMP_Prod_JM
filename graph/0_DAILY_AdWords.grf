<?xml version="1.0" encoding="UTF-8"?>
<Graph author="macmac" created="Wed Mar 26 14:40:23 EST 2014" guiVersion="3.4.4.P" id="1395986186067" licenseType="Commercial" modified="Mon Jul 21 14:52:06 EST 2014" modifiedBy="macmac" name="aauAdWords" revision="1.127" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/APACDigital_Adwords.fmt" id="Metadata1"/>
<Metadata fileURL="${META_DIR}/GD_Adwords.fmt" id="Metadata2"/>
<Metadata fileURL="${META_DIR}/Output.fmt" id="Metadata0"/>
<Metadata id="UDR_ErrorPort">
<Record fieldDelimiter="|" name="CSV_Reader_ErrorPort" recordDelimiter="\n" type="delimited">
<Field name="recordNo" type="long"/>
<Field name="fieldNo" type="integer"/>
<Field name="originalData" type="string"/>
<Field name="errorMessage" type="string"/>
<Field name="fileURL" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="408" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="DAILY Adwords data" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="1201" x="-32" y="44"/>
<Dictionary/>
</Global>
<Phase number="1">
<Node dataPolicy="controlled" enabled="enabled" fileURL="port:$0.response:discrete" guiName="CSV Reader" guiX="326" guiY="181" id="CSV_READER1" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATA_TMP_DIR}/GAW_log_`date2str(today(), &quot;yyyyMMdd&quot;)`.csv" guiName="CSV Writer" guiX="340" guiY="311" id="CSV_WRITER" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${DATA_SOURCE_DIR}/GAW_Data.csv" guiName="CSV Writer" guiX="988" guiY="250" id="CSV_WRITER1" quoteCharacter="&quot;" quotedStrings="true" type="DATA_WRITER"/>
<Node enabled="enabled" guiName="ExtFilter" guiX="497" guiY="126" id="EXT_FILTER" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
date2str($in.0.Day,'yyyy-MM-dd') == date2str(dateAdd(today(),-2,day),'yyyy-MM-dd')]]></attr>
</Node>
<Node dataset="dataset.adwords" datasetFieldMappings="{&quot;gd_dataset&quot;:{&quot;datasetId&quot;:&quot;dataset.adwords&quot;,&quot;datasetTitle&quot;:&quot;Adwords&quot;,&quot;attributes&quot;:[],&quot;referencedAttributes&quot;:[{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.campaign.campaignid&quot;,&quot;title&quot;:&quot;Campaign ID&quot;,&quot;prettyId&quot;:&quot;attr_campaign_campaignid&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.campaign.campaignid&quot;,&quot;title&quot;:&quot;Campaign ID&quot;,&quot;prettyId&quot;:&quot;campaign__campaignid&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:false}}],&quot;assignedMetadataField&quot;:&quot;Campaign_ID&quot;,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.campaign.campaignid&quot;,&quot;title&quot;:&quot;Campaign ID&quot;,&quot;prettyId&quot;:&quot;campaign__campaignid&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:false}}}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.client.clientid&quot;,&quot;title&quot;:&quot;Client ID&quot;,&quot;prettyId&quot;:&quot;attr_client_clientid&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.client.clientid&quot;,&quot;title&quot;:&quot;Client ID&quot;,&quot;prettyId&quot;:&quot;client__clientid&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:false}}],&quot;assignedMetadataField&quot;:&quot;Client&quot;,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.client.clientid&quot;,&quot;title&quot;:&quot;Client ID&quot;,&quot;prettyId&quot;:&quot;client__clientid&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:false}}}}],&quot;dateAttributes&quot;:[{&quot;gd_dataset_date_attribute&quot;:{&quot;id&quot;:&quot;date.date&quot;,&quot;title&quot;:&quot;Date (Date)&quot;,&quot;prettyId&quot;:&quot;date&quot;,&quot;assignedMetadataField&quot;:&quot;Day&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;date.date.yyyymmdd&quot;,&quot;title&quot;:&quot;yyyy-mm-dd (Date)&quot;,&quot;prettyId&quot;:&quot;date_date_yyyymmdd&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:true}}],&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;date.date.yyyymmdd&quot;,&quot;title&quot;:&quot;yyyy-mm-dd (Date)&quot;,&quot;prettyId&quot;:&quot;date_date_yyyymmdd&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:true}},&quot;associatedFact&quot;:null}}],&quot;simpleFacts&quot;:[{&quot;gd_dataset_fact&quot;:{&quot;id&quot;:&quot;fact.adwords.averageposition&quot;,&quot;title&quot;:&quot;Adwords Average Position&quot;,&quot;prettyId&quot;:&quot;averageposition&quot;,&quot;type&quot;:&quot;DECIMAL&quot;,&quot;assignedMetadataField&quot;:&quot;Avg_position&quot;}},{&quot;gd_dataset_fact&quot;:{&quot;id&quot;:&quot;fact.adwords.impressions&quot;,&quot;title&quot;:&quot;Adwords Clicks&quot;,&quot;prettyId&quot;:&quot;impressions&quot;,&quot;type&quot;:&quot;DECIMAL&quot;,&quot;assignedMetadataField&quot;:&quot;Clicks&quot;}},{&quot;gd_dataset_fact&quot;:{&quot;id&quot;:&quot;fact.adwords.cost&quot;,&quot;title&quot;:&quot;Adwords Cost&quot;,&quot;prettyId&quot;:&quot;cost&quot;,&quot;type&quot;:&quot;DECIMAL&quot;,&quot;assignedMetadataField&quot;:&quot;Total_cost&quot;}},{&quot;gd_dataset_fact&quot;:{&quot;id&quot;:&quot;fact.adwords.impressionshare&quot;,&quot;title&quot;:&quot;Adwords Impression Share&quot;,&quot;prettyId&quot;:&quot;impressionshare&quot;,&quot;type&quot;:&quot;DECIMAL&quot;,&quot;assignedMetadataField&quot;:&quot;Search_Exact_match_IS&quot;}},{&quot;gd_dataset_fact&quot;:{&quot;id&quot;:&quot;fact.adwords.adwordsimpressions&quot;,&quot;title&quot;:&quot;Adwords Impressions&quot;,&quot;prettyId&quot;:&quot;adwordsimpressions&quot;,&quot;type&quot;:&quot;DECIMAL&quot;,&quot;assignedMetadataField&quot;:&quot;Impressions&quot;}}],&quot;dateFacts&quot;:[],&quot;fieldsWithMetadataConflict&quot;:[],&quot;entitiesWithoutMetadata&quot;:[],&quot;entitiesWithoutValue&quot;:[],&quot;datesWithFactConflict&quot;:[],&quot;unassigneddateFacts&quot;:[]}}" enabled="enabled" guiName="GD Adwords" guiX="1011" guiY="139" id="GD_ADWORDS" mode="INCREMENTAL" retriesInterval="60" retriesNumber="5" type="GD_DATASET_WRITER"/>
<Node enabled="enabled" guiName="Reformat" guiX="658" guiY="126" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
string temp;
// Transforms input record into output record.
function integer transform() {
		$out.0.* = $in.0.*;
	
		$out.0.Client = '${CLIENT_ID}';
		temp = $in.0.Search_Exact_match_IS;
		switch (temp) {
   		 case ' --' : temp = '0.0%'; break;
    	 case '< 10%' : temp = '10.0%'; break;   
		}
	
		$out.0.Search_Exact_match_IS = str2double(temp,'#.#%');
		
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node authConfiguration="{&quot;authMethod&quot;:&quot;OAUTH_2&quot;,&quot;authCredentials&quot;:{&quot;REFRESH_TOKEN&quot;:&quot;${GAW_REF_TOKEN}&quot;,&quot;CLIENT_ID&quot;:&quot;${GAW_CLIENT_ID}&quot;,&quot;REFRESH_TOKEN_URL&quot;:&quot;https://accounts.google.com/o/oauth2/token&quot;,&quot;CLIENT_SECRET&quot;:&quot;${GAW_CLIENT_SECRET}&quot;}}" charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    requestParams[&quot;PAGE_NO&quot;] = toString(iterationNumber);&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;   &#10;    // Example response handling&#10;     if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;     &#9;printLog(info,responseBody);&#10;         return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#9;&#9;&#10;&#9;&#9;//return &quot;CONTINUE&quot;;&#10;     }&#10;    else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;         //return &quot;DONE_WITH_OUTPUT&quot;;&#10;    &#9;printLog(info,responseBody);&#10;    &#9;return &quot;CONTINUE&quot;;&#10; }&#10;    // else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;    //     return &quot;RETRY&quot;;&#10;    // }&#10;     else {&#10;         // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;         printLog(info,responseBody);&#10;         //return &quot;FATAL_ERROR&quot;;&#10;&#9;&#9;return &quot;CONTINUE&quot;;&#10;     }&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="enabled" guiName="REST Connector" guiX="-26" guiY="181" id="REST_CONNECTOR1" maxPageNumber="1" requestDelayInSeconds="2" requestMethod="POST" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://adwords.google.com/api/adwords/reportdownload/v201402]]></attr>
<attr name="requestHeaders"><![CDATA[Content-Type=application/x-www-form-urlencoded
clientCustomerId=${GAW_CUSTOMER_ID}
developerToken=${GAW_DEV_TOKEN}
returnMoneyInMicros=false
]]></attr>
<attr name="requestBody"><![CDATA[__rdxml=%3CreportDefinition+xmlns%3D%22https%3A%2F%2Fadwords.google.com%2Fapi%2Fadwords%2Fcm%2Fv201402%22%3E%0A++%3Cselector%3E%0A++++%3Cfields%3ECampaignId%3C%2Ffields%3E%0A++++%3Cfields%3EId%3C%2Ffields%3E%0A++++%3Cfields%3EAccountId%3C%2Ffields%3E%0A++++%3Cfields%3EDate%3C%2Ffields%3E%0A++++%3Cfields%3ECampaignName%3C%2Ffields%3E%0A++++%3Cfields%3ESearchExactMatchImpressionShare%3C%2Ffields%3E%0A++++%3Cfields%3EImpressions%3C%2Ffields%3E%0A++++%3Cfields%3EClicks%3C%2Ffields%3E%0A++++%3Cfields%3ETotalCost%3C%2Ffields%3E%0A++++%3Cfields%3EAveragePosition%3C%2Ffields%3E%0A++%3C%2Fselector%3E%0A++%3CreportName%3ECustom+CP+Report%3C%2FreportName%3E%0A++%3CreportType%3ECAMPAIGN_PERFORMANCE_REPORT%3C%2FreportType%3E%0A++%3CdateRangeType%3ELAST_7_DAYS%3C%2FdateRangeType%3E%0A++%3CdownloadFormat%3ECSV%3C%2FdownloadFormat%3E%0A%3C%2FreportDefinition%3E]]></attr>
</Node>
<Node authConfiguration="{&quot;authMethod&quot;:&quot;OAUTH_2&quot;,&quot;authCredentials&quot;:{&quot;REFRESH_TOKEN&quot;:&quot;${GAW_REF_TOKEN}&quot;,&quot;CLIENT_ID&quot;:&quot;${GAW_CLIENT_ID}&quot;,&quot;REFRESH_TOKEN_URL&quot;:&quot;https://accounts.google.com/o/oauth2/token&quot;,&quot;CLIENT_SECRET&quot;:&quot;${GAW_CLIENT_SECRET}&quot;}}" charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    requestParams[&quot;PAGE_NO&quot;] = toString(iterationNumber);&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;   &#10;    // Example response handling&#10;     if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;     &#9;printLog(info,responseBody);&#10;         return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#9;&#9;&#10;&#9;&#9;//return &quot;CONTINUE&quot;;&#10;     }&#10;    else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;         //return &quot;DONE_WITH_OUTPUT&quot;;&#10;    &#9;printLog(info,responseBody);&#10;    &#9;return &quot;CONTINUE&quot;;&#10; }&#10;    // else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;    //     return &quot;RETRY&quot;;&#10;    // }&#10;     else {&#10;         // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;         printLog(info,responseBody);&#10;         //return &quot;FATAL_ERROR&quot;;&#10;&#9;&#9;return &quot;CONTINUE&quot;;&#10;     }&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="disabled" guiName="REST Connector" guiX="-15" guiY="498" id="REST_CONNECTOR2" maxPageNumber="1" requestDelayInSeconds="2" requestMethod="POST" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://adwords.google.com/api/adwords/reportdownload/v201402]]></attr>
<attr name="requestHeaders"><![CDATA[Content-Type=application/x-www-form-urlencoded
clientCustomerId=${GAW_CUSTOMER_ID}
developerToken=${GAW_DEV_TOKEN}
]]></attr>
<attr name="requestBody"><![CDATA[__rdxml=%3CreportDefinition+xmlns%3D%22https%3A%2F%2Fadwords.google.com%2Fapi%2Fadwords%2Fcm%2Fv201402%22%3E%0A++%3Cselector%3E%0A++++%3Cfields%3ECampaignId%3C%2Ffields%3E%0A++++%3Cfields%3EId%3C%2Ffields%3E%0A++++%3Cfields%3EAccountId%3C%2Ffields%3E%0A++++%3Cfields%3EDate%3C%2Ffields%3E%0A++++%3Cfields%3ECampaignName%3C%2Ffields%3E%0A++++%3Cfields%3ESearchExactMatchImpressionShare%3C%2Ffields%3E%0A++++%3Cfields%3EImpressions%3C%2Ffields%3E%0A++++%3Cfields%3EClicks%3C%2Ffields%3E%0A++++%3Cfields%3ETotalCost%3C%2Ffields%3E%0A++++%3Cfields%3EAveragePosition%3C%2Ffields%3E%0A++%3C%2Fselector%3E%0A++%3CreportName%3ECustom+CP+Report%3C%2FreportName%3E%0A++%3CreportType%3ECAMPAIGN_PERFORMANCE_REPORT%3C%2FreportType%3E%0A++%3CdateRangeType%3ELAST_7_DAYS%3C%2FdateRangeType%3E%0A++%3CdownloadFormat%3ECSV%3C%2FdownloadFormat%3E%0A%3C%2FreportDefinition%3E]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="156" guiY="190" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="819" guiY="126" id="SIMPLE_COPY1" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="Trash" guiX="1013" guiY="62" id="TRASH" type="TRASH"/>
<Node enabled="enabled" guiName="Trash" guiX="614" guiY="282" id="TRASH1" type="TRASH"/>
<Edge debugMode="true" fromNode="CSV_READER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="EXT_FILTER:0"/>
<Edge debugMode="true" fromNode="CSV_READER1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="UDR_ErrorPort" outPort="Port 1 (logs)" toNode="TRASH1:0"/>
<Edge debugMode="true" fromNode="EXT_FILTER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (accepted)" toNode="REFORMAT:0"/>
<Edge debugMode="true" fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SIMPLE_COPY1:0"/>
<Edge debugMode="true" fromNode="REST_CONNECTOR1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="SIMPLE_COPY:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (input)" metadata="Metadata0" outPort="Port 0 (out)" toNode="CSV_READER1:0"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="CSV_WRITER:0"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="TRASH:0"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 1 (out)" toNode="GD_ADWORDS:0"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY1:2" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 2 (out)" toNode="CSV_WRITER1:0"/>
</Phase>
</Graph>
