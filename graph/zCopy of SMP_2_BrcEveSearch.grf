<?xml version="1.0" encoding="UTF-8"?>
<Graph author="macmac" created="Mon May 26 11:20:13 EST 2014" guiVersion="3.4.4.P" id="1401086834524" licenseType="Commercial" modified="Wed Jul 16 10:59:12 EST 2014" modifiedBy="macmac" name="SMP" revision="1.173" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/GD_Customers.fmt" id="Metadata10"/>
<Metadata fileURL="${META_DIR}/GD_Website.fmt" id="Metadata9"/>
<Metadata fileURL="${META_DIR}/Response.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/SMP_API_EmailSearch.fmt" id="Metadata4"/>
<Metadata fileURL="${META_DIR}/SMP_EmailSearch.fmt" id="Metadata2"/>
<Metadata fileURL="${META_DIR}/SMP_Subscribers.fmt" id="Metadata5"/>
<Metadata id="UDR_ErrorPort">
<Record fieldDelimiter="|" name="CSV_Reader_ErrorPort" recordDelimiter="\n" type="delimited">
<Field name="recordNo" type="long"/>
<Field name="fieldNo" type="integer"/>
<Field name="originalData" type="string"/>
<Field name="errorMessage" type="string"/>
<Field name="fileURL" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata11" previewAttachment="${DATA_SOURCE_DIR}/SMP_BrCastLookUp.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," label="SMP_BrCastLookUp.csv" name="SMP_BrCastLookUp_csv" previewAttachment="${DATA_SOURCE_DIR}/SMP_BrCastLookUp.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="both" quotedStrings="false" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="Code" type="integer"/>
<Field eofAsDelimiter="false" name="Definition" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata8" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="SMP_BroadcastEvents" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="AppClickDescription" type="string"/>
<Field name="AppClickIPAddress" type="string"/>
<Field name="AppClickType" type="integer"/>
<Field name="BroadcastId" type="integer"/>
<Field name="EmailAddress" type="string"/>
<Field name="EventTimeUtc" type="date"/>
<Field name="EventType" type="integer"/>
<Field name="HardBounceClass" type="integer"/>
<Field name="HardBounceMsg" type="string"/>
<Field name="LinkClickTimeUtc" type="date"/>
<Field name="LinkName" type="string"/>
<Field name="LinkURL" type="string"/>
<Field name="OpenUserAgent" type="string"/>
<Field name="SubscriberId" type="string"/>
<Field name="SubscriberKey" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata6" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="SMP_BroadcastResponse" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="Accepted" type="boolean"/>
<Field name="AcceptedTimeUtc" type="date"/>
<Field name="AccountUnsubscribes" type="integer"/>
<Field name="AppClicks" type="integer"/>
<Field name="BroadcastEmailId" type="string"/>
<Field name="BroadcastId" type="integer"/>
<Field name="EmailId" type="string"/>
<Field name="EmailAddress" type="string"/>
<Field name="FBLUnsubscribes" type="integer"/>
<Field name="HardBounces" type="integer"/>
<Field name="LastAccountUnsubscribeTimeUtc" type="date"/>
<Field name="LastAppClickTimeUtc" type="date"/>
<Field name="LastFBLUnsubscribeTimeUtc" type="date"/>
<Field name="LastHardBounceTimeUtc" type="date"/>
<Field name="LastLinkClickTimeUtc" type="date"/>
<Field name="LastListUnsubscribeTimeUtc" type="date"/>
<Field name="LastRenderTimeUtc" type="date"/>
<Field name="LastSoftBounceTimeUtc" type="date"/>
<Field name="LinkClicks" type="integer"/>
<Field name="ListUnsubscribes" type="integer"/>
<Field name="Renders" type="integer"/>
<Field name="SoftBounces" type="integer"/>
<Field name="SubscriberId" type="string"/>
<Field name="SubscriberKey" type="string"/>
<Field name="UniqueAppClicks" type="integer"/>
<Field name="UniqueLinkClicks" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata7" previewAttachment="${DATA_SOURCE_DIR}/SMP_LookUp.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," label="SMP_LookUp.csv" name="SMP_EventLookUp_csv" previewAttachment="${DATA_SOURCE_DIR}/SMP_LookUp.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="both" quotedStrings="false" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="Code" type="integer"/>
<Field name="Definition" type="string"/>
<Field eofAsDelimiter="false" name="Notes" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="SMP_GD_Customers" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="SubscriberId" type="string"/>
<Field name="EmailAddress" type="string"/>
<Field name="ClientID" type="string"/>
<Field name="SegmentID" type="string"/>
<Field name="CustomerName" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="SMP_GD_MsgEvent" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="AppClickDescription" type="string"/>
<Field name="AppClickIPAddress" type="string"/>
<Field name="AppClickType" type="integer"/>
<Field name="BroadcastId" type="integer"/>
<Field name="EmailAddress" type="string"/>
<Field name="EventTimeUtc" type="date"/>
<Field name="EventType" type="integer"/>
<Field name="HardBounceClass" type="integer"/>
<Field name="HardBounceMsg" type="string"/>
<Field name="LinkClickTimeUtc" type="date"/>
<Field name="LinkName" type="string"/>
<Field name="LinkURL" type="string"/>
<Field name="OpenUserAgent" type="string"/>
<Field name="SubscriberId" type="integer"/>
<Field name="SubscriberKey" type="integer"/>
<Field name="EmailID" type="string"/>
<Field name="ignore" type="integer"/>
<Field name="EventTypeDefinition" type="string"/>
<Field name="BroadCastStatusDef" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<LookupTable charset="ISO-8859-1" id="LookupTable1" initialSize="512" key="Code" metadata="Metadata11" name="SMP_BrCastLookUp" type="simpleLookup"/>
<LookupTable charset="ISO-8859-1" id="LookupTable0" initialSize="512" key="Code" metadata="Metadata7" name="SMP_EventLookUp" type="simpleLookup"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="426" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="/Email/BroadcastEvents/Search/" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="1215" x="-325" y="90"/>
<Dictionary/>
</Global>
<Phase number="1">
<Node dataPolicy="controlled" enabled="enabled" fileURL="${DATA_SOURCE_DIR}/SMP_BrcResponse.csv" guiName="CSV Reader" guiX="451" guiY="1084" id="CSV_READER" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATA_TMP_DIR}/EmailSearchResults.csv" guiName="CSV Reader" guiX="-270" guiY="147" id="CSV_READER1" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATA_SOURCE_DIR}/SMP_BrcEvent.csv" guiName="CSV Writer" guiX="288" guiY="332" id="CSV_WRITER" outputFieldNames="true" quotedStrings="true" type="DATA_WRITER"/>
<Node enabled="enabled" guiName="ExtFilter" guiX="-49" guiY="156" id="EXT_FILTER1" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.EmailID == '90971'

OR
$in.0.EmailID == '91271'

OR
$in.0.EmailID == '91260'
]]></attr>
</Node>
<Node enabled="enabled" guiName="ExtFilter" guiX="467" guiY="156" id="EXT_FILTER2" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
length($in.0.response) > 207
]]></attr>
</Node>
<Node enabled="enabled" guiName="ExtHashJoin" guiX="436" guiY="923" id="EXT_HASH_JOIN" joinKey="$BroadcastId=$BroadcastId" joinType="leftOuter" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.EmailID = $in.1.EmailId;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dataset="dataset.messagesevent" datasetFieldMappings="{&quot;gd_dataset&quot;:{&quot;datasetId&quot;:&quot;dataset.messagesevent&quot;,&quot;datasetTitle&quot;:&quot;Messages Event&quot;,&quot;attributes&quot;:[{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.applicationclickreason&quot;,&quot;title&quot;:&quot;Application Click Reason&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_applicationclickreason&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.applicationclickreason&quot;,&quot;title&quot;:&quot;Application Click Reason&quot;,&quot;prettyId&quot;:&quot;applicationclickreason&quot;,&quot;assignedMetadataField&quot;:&quot;AppClickDescription&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.emaileventtype&quot;,&quot;title&quot;:&quot;Email Event Type&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_emaileventtype&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.emaileventtype&quot;,&quot;title&quot;:&quot;Email Event Type&quot;,&quot;prettyId&quot;:&quot;emaileventtype&quot;,&quot;assignedMetadataField&quot;:&quot;EventType&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.hardbounceclass&quot;,&quot;title&quot;:&quot;Hard Bounce Class&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_hardbounceclass&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.hardbounceclass&quot;,&quot;title&quot;:&quot;Hard Bounce Class&quot;,&quot;prettyId&quot;:&quot;hardbounceclass&quot;,&quot;assignedMetadataField&quot;:&quot;HardBounceClass&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.hardbounceclass&quot;,&quot;title&quot;:&quot;Hard Bounce Class&quot;,&quot;prettyId&quot;:&quot;hardbounceclass&quot;,&quot;assignedMetadataField&quot;:&quot;HardBounceClass&quot;,&quot;referenceKey&quot;:true}}}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.hardbouncemessage&quot;,&quot;title&quot;:&quot;Hard Bounce Message&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_hardbouncemessage&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.hardbouncemessage&quot;,&quot;title&quot;:&quot;Hard Bounce Message&quot;,&quot;prettyId&quot;:&quot;hardbouncemessage&quot;,&quot;assignedMetadataField&quot;:&quot;HardBounceMsg&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.ipaddress&quot;,&quot;title&quot;:&quot;IP Address&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_ipaddress&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.ipaddress&quot;,&quot;title&quot;:&quot;IP Address&quot;,&quot;prettyId&quot;:&quot;ipaddress&quot;,&quot;assignedMetadataField&quot;:&quot;AppClickIPAddress&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.ipaddress&quot;,&quot;title&quot;:&quot;IP Address&quot;,&quot;prettyId&quot;:&quot;ipaddress&quot;,&quot;assignedMetadataField&quot;:&quot;AppClickIPAddress&quot;,&quot;referenceKey&quot;:true}}}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.linkname&quot;,&quot;title&quot;:&quot;Link Name&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_linkname&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.linkname&quot;,&quot;title&quot;:&quot;Link Name&quot;,&quot;prettyId&quot;:&quot;linkname&quot;,&quot;assignedMetadataField&quot;:&quot;LinkName&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.linkname&quot;,&quot;title&quot;:&quot;Link Name&quot;,&quot;prettyId&quot;:&quot;linkname&quot;,&quot;assignedMetadataField&quot;:&quot;LinkName&quot;,&quot;referenceKey&quot;:true}}}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.linkurl&quot;,&quot;title&quot;:&quot;Link URL&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_linkurl&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.linkurl&quot;,&quot;title&quot;:&quot;Link URL&quot;,&quot;prettyId&quot;:&quot;linkurl&quot;,&quot;assignedMetadataField&quot;:&quot;LinkURL&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.linkurl&quot;,&quot;title&quot;:&quot;Link URL&quot;,&quot;prettyId&quot;:&quot;linkurl&quot;,&quot;assignedMetadataField&quot;:&quot;LinkURL&quot;,&quot;referenceKey&quot;:true}}}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.messagesevent.useragent&quot;,&quot;title&quot;:&quot;User Agent&quot;,&quot;prettyId&quot;:&quot;attr_messagesevent_useragent&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.useragent&quot;,&quot;title&quot;:&quot;User Agent&quot;,&quot;prettyId&quot;:&quot;useragent&quot;,&quot;assignedMetadataField&quot;:&quot;OpenUserAgent&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.messagesevent.useragent&quot;,&quot;title&quot;:&quot;User Agent&quot;,&quot;prettyId&quot;:&quot;useragent&quot;,&quot;assignedMetadataField&quot;:&quot;OpenUserAgent&quot;,&quot;referenceKey&quot;:true}}}}],&quot;referencedAttributes&quot;:[{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.campaign.campaignid&quot;,&quot;title&quot;:&quot;Campaign ID&quot;,&quot;prettyId&quot;:&quot;attr_campaign_campaignid&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.campaign.campaignid&quot;,&quot;title&quot;:&quot;Campaign ID&quot;,&quot;prettyId&quot;:&quot;campaign__campaignid&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:false}}],&quot;assignedMetadataField&quot;:&quot;EmailID&quot;,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.campaign.campaignid&quot;,&quot;title&quot;:&quot;Campaign ID&quot;,&quot;prettyId&quot;:&quot;campaign__campaignid&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:false}}}}],&quot;dateAttributes&quot;:[{&quot;gd_dataset_date_attribute&quot;:{&quot;id&quot;:&quot;emailevent.date&quot;,&quot;title&quot;:&quot;Date (Email Event)&quot;,&quot;prettyId&quot;:&quot;emailevent&quot;,&quot;assignedMetadataField&quot;:&quot;EventTimeUtc&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;emailevent.date.yyyymmdd&quot;,&quot;title&quot;:&quot;yyyy-mm-dd (Email Event)&quot;,&quot;prettyId&quot;:&quot;emailevent_date_yyyymmdd&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:true}}],&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;emailevent.date.yyyymmdd&quot;,&quot;title&quot;:&quot;yyyy-mm-dd (Email Event)&quot;,&quot;prettyId&quot;:&quot;emailevent_date_yyyymmdd&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:true}},&quot;associatedFact&quot;:null}},{&quot;gd_dataset_date_attribute&quot;:{&quot;id&quot;:&quot;linkclick.date&quot;,&quot;title&quot;:&quot;Date (Link Click)&quot;,&quot;prettyId&quot;:&quot;linkclick&quot;,&quot;assignedMetadataField&quot;:&quot;LinkClickTimeUtc&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;linkclick.date.yyyymmdd&quot;,&quot;title&quot;:&quot;yyyy-mm-dd (Link Click)&quot;,&quot;prettyId&quot;:&quot;linkclick_date_yyyymmdd&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:true}}],&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;linkclick.date.yyyymmdd&quot;,&quot;title&quot;:&quot;yyyy-mm-dd (Link Click)&quot;,&quot;prettyId&quot;:&quot;linkclick_date_yyyymmdd&quot;,&quot;assignedMetadataField&quot;:null,&quot;referenceKey&quot;:true}},&quot;associatedFact&quot;:null}}],&quot;simpleFacts&quot;:[{&quot;gd_dataset_fact&quot;:{&quot;id&quot;:&quot;fact.messagesevent.me&quot;,&quot;title&quot;:&quot;ignore&quot;,&quot;prettyId&quot;:&quot;me&quot;,&quot;type&quot;:&quot;DECIMAL&quot;,&quot;assignedMetadataField&quot;:&quot;ignore&quot;}}],&quot;dateFacts&quot;:[],&quot;fieldsWithMetadataConflict&quot;:[],&quot;entitiesWithoutMetadata&quot;:[],&quot;entitiesWithoutValue&quot;:[],&quot;datesWithFactConflict&quot;:[],&quot;unassigneddateFacts&quot;:[]}}" enabled="enabled" guiName="GD SMP_MsgEvent" guiX="1043" guiY="933" id="GD_SMP_MSG_EVENT" retriesInterval="60" retriesNumber="5" type="GD_DATASET_WRITER"/>
<Node enabled="enabled" guiName="LookupJoin" guiX="647" guiY="927" id="LOOKUP_JOIN" joinKey="EventType" leftOuterJoin="true" lookupTable="LookupTable0" type="LOOKUP_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.EventTypeDefinition = $in.1.Definition;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="LookupJoin" guiX="843" guiY="935" id="LOOKUP_JOIN1" joinKey="HardBounceClass" leftOuterJoin="true" lookupTable="LookupTable1" type="LOOKUP_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.BroadCastStatusDef = $in.1.Definition;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="301" guiY="159" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.response = $in.0.response;
	printLog(info,length($in.0.response));
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    requestParams[&quot;PAGE_NO&quot;] = toString(iterationNumber);&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;    return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#10;    // Example response handling&#10;    // if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;    //     return &quot;CONTINUE&quot;;&#10;    // }&#10;    // else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;    //     return &quot;DONE_NO_OUTPUT&quot;;&#10;    // }&#10;    // else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;    //     return &quot;RETRY&quot;;&#10;    // }&#10;    // else {&#10;    //     // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;    //     return &quot;FATAL_ERROR&quot;;&#10;    // }&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="enabled" guiName="REST Events" guiX="117" guiY="156" id="REST_EVENTS" requestDelayInSeconds="5" requestMethod="POST" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[http://api.smartmailpro.com/2.0/Email/BroadcastEvents/Search/]]></attr>
<attr name="requestHeaders"><![CDATA[API-Key=${SMP_API_KEY}
Cache-Control=no-cache
Content-Type=text/json
Host=api.smartmailpro.com
]]></attr>
<attr name="requestBody"><![CDATA[{ 	"ListId":${SMP_LIST_ID}, 
	"EmailId":${EmailID},
	"ResponseFrom":"\/Date(928106400000+1200)\/",
	"Page":1,
	"Limit":1000000
 }]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="105" guiY="322" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="650" guiY="156" id="SIMPLE_COPY2" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="Trash" guiX="674" guiY="1096" id="TRASH" type="TRASH"/>
<Node enabled="enabled" guiName="Trash" guiX="610" guiY="290" id="TRASH2" type="TRASH"/>
<Node charset="UTF-8" enabled="enabled" guiName="XMLExtract" guiX="-64" guiY="304" id="XMLEXTRACT4" schema="${DATA_GOODDATA_DIR}//BroadcastEventList.xsd" sourceUri="port:$0.response:discrete" type="XML_EXTRACT">
<attr name="mapping"><![CDATA[<Mappings>
	<Mapping element="Smar:BroadcastEventList">
		<Mapping element="Smar:BroadcastEvent" outPort="0"
				xmlFields="{URN:SmartmailPRO}AppClickDescription;{URN:SmartmailPRO}AppClickIPAddress;{URN:SmartmailPRO}AppClickType;{URN:SmartmailPRO}BroadcastId;{URN:SmartmailPRO}EmailAddress;{URN:SmartmailPRO}EventTimeUtc;{URN:SmartmailPRO}EventType;{URN:SmartmailPRO}HardBounceClass;{URN:SmartmailPRO}HardBounceMsg;{URN:SmartmailPRO}LinkClickTimeUtc;{URN:SmartmailPRO}LinkName;{URN:SmartmailPRO}LinkUrl;{URN:SmartmailPRO}OpenUserAgent;{URN:SmartmailPRO}SubscriberId;{URN:SmartmailPRO}SubscriberKey"
				cloverFields="AppClickDescription;AppClickIPAddress;AppClickType;BroadcastId;EmailAddress;EventTimeUtc;EventType;HardBounceClass;HardBounceMsg;LinkClickTimeUtc;LinkName;LinkURL;OpenUserAgent;SubscriberId;SubscriberKey">
		</Mapping>
	</Mapping>
</Mappings>
]]></attr>
<attr name="namespaceBindings"><![CDATA[Smar=URN:SmartmailPRO]]></attr>
</Node>
<Edge debugMode="true" fromNode="CSV_READER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 1 (slave)" metadata="Metadata6" outPort="Port 0 (output)" toNode="EXT_HASH_JOIN:1"/>
<Edge debugMode="true" fromNode="CSV_READER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="UDR_ErrorPort" outPort="Port 1 (logs)" toNode="TRASH:0"/>
<Edge debugMode="true" fromNode="CSV_READER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (output)" toNode="EXT_FILTER1:0"/>
<Edge debugMode="true" fromNode="EXT_FILTER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge23" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (accepted)" toNode="REST_EVENTS:0"/>
<Edge debugMode="true" fromNode="EXT_FILTER2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (accepted)" toNode="SIMPLE_COPY2:0"/>
<Edge debugMode="true" fromNode="EXT_FILTER2:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (rejected)" toNode="TRASH2:0"/>
<Edge fromNode="EXT_HASH_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="LOOKUP_JOIN:0"/>
<Edge fromNode="LOOKUP_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (joined records)" toNode="LOOKUP_JOIN1:0"/>
<Edge debugMode="true" fromNode="LOOKUP_JOIN1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (joined records)" toNode="GD_SMP_MSG_EVENT:0"/>
<Edge debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge25" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_FILTER2:0"/>
<Edge debugMode="true" fromNode="REST_EVENTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 0 (output)" toNode="REFORMAT1:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata8" outPort="Port 0 (out)" toNode="CSV_WRITER:0"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge27" inPort="Port 0 (input)" metadata="Metadata0" outPort="Port 0 (out)" toNode="XMLEXTRACT4:0"/>
<Edge debugMode="true" fromNode="XMLEXTRACT4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge26" inPort="Port 0 (in)" metadata="Metadata8" outPort="Port 0 (out)" toNode="SIMPLE_COPY:0"/>
</Phase>
</Graph>
